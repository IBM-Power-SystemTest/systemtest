# Generated by Django 3.1.5 on 2021-05-01 22:06

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import systemtest.utils.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('part_number', systemtest.utils.models.CharFieldUpper(help_text='Part Number (7 chars)', max_length=7, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]{7}$', message='Only 7 chars alpha-numeric')], verbose_name='Part Number [ PN ]')),
                ('serial_number', systemtest.utils.models.CharFieldUpper(blank=True, default=None, help_text='Serial Number [optional] (12 chars)', max_length=12, null=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]{12}$', message='Only 12 chars alpha-numeric')], verbose_name='Serial Number [ SN ]')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Request DateTime', verbose_name='Created')),
                ('comment', systemtest.utils.models.CharFieldUpper(blank=True, default=None, help_text='Aditional comment', max_length=30, null=True, verbose_name='Coment')),
                ('ncm_tag', models.PositiveIntegerField(blank=True, default=None, help_text='Non-Conforming Material (8 numeric chars)', null=True, unique=True, validators=[django.core.validators.MaxValueValidator(99999999), django.core.validators.MinValueValidator(10000000)], verbose_name='NCM')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Updated DateTime', verbose_name='Updated')),
            ],
            options={
                'verbose_name': 'request',
                'verbose_name_plural': 'requests',
                'db_table': 'pts_request',
            },
        ),
        migrations.CreateModel(
            name='RequestGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('part_description', systemtest.utils.models.CharFieldUpper(help_text='Name or description of part (15 chars max)', max_length=15, verbose_name='Description')),
                ('part_number', systemtest.utils.models.CharFieldUpper(help_text='Part Numbers of the original requirement (7 chars)', max_length=7, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]{7}$', message='Only 7 chars alpha-numeric')], verbose_name='Part Number [ PN ]')),
                ('is_vpd', models.BooleanField(default=False, help_text='Parts that are given to change', verbose_name='VPD o TPM')),
                ('is_serialized', models.BooleanField(default=True, help_text='If Part number has serial number', verbose_name='Serialized')),
                ('system_number', systemtest.utils.models.CharFieldUpper(help_text='MFGN (7 chars)', max_length=7, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]{7}$', message='Only 7 chars alpha-numeric')], verbose_name='System Number [ MFGN ]')),
                ('system_cell', systemtest.utils.models.CharFieldUpper(help_text='Logic testcell where the system is (7 chars max)', max_length=7, null=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]{4}$', message='Only 4 chars alpha-numeric')], verbose_name="System's testcell")),
                ('is_loaner', models.BooleanField(default=False, help_text='Only if the system needs loaner parts', verbose_name='Loaner')),
                ('qty', models.SmallIntegerField(default=1, help_text='Number of pieces of the same PN', validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(1)], verbose_name='Quantity')),
                ('request_bay', systemtest.utils.models.CharFieldUpper(help_text='Cluster of user (4 chars max)', max_length=4, null=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]{4}$', message='Only 4 chars alpha-numeric')], verbose_name='Cluster TA')),
            ],
            options={
                'verbose_name': 'group',
                'verbose_name_plural': 'groups',
                'db_table': 'pts_request_group',
            },
        ),
        migrations.CreateModel(
            name='RequestGroupWorkspace',
            fields=[
                ('id', models.SmallAutoField(editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', systemtest.utils.models.CharFieldUpper(help_text='List element', max_length=50, unique=True, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'group workspace',
                'verbose_name_plural': 'group workspaces',
                'db_table': 'pts_request_group_workspace',
            },
        ),
        migrations.CreateModel(
            name='RequestStatus',
            fields=[
                ('id', models.SmallAutoField(editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', systemtest.utils.models.CharFieldUpper(help_text='List element', max_length=50, unique=True, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'status',
                'verbose_name_plural': 'status',
                'db_table': 'pts_request_status',
            },
        ),
        migrations.CreateModel(
            name='RequestHistory',
            fields=[
                ('part_number', systemtest.utils.models.CharFieldUpper(help_text='Part Number (7 chars)', max_length=7, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]{7}$', message='Only 7 chars alpha-numeric')], verbose_name='Part Number [ PN ]')),
                ('serial_number', systemtest.utils.models.CharFieldUpper(blank=True, default=None, help_text='Serial Number [optional] (12 chars)', max_length=12, null=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]{12}$', message='Only 12 chars alpha-numeric')], verbose_name='Serial Number [ SN ]')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Request DateTime', verbose_name='Created')),
                ('comment', systemtest.utils.models.CharFieldUpper(blank=True, default=None, help_text='Aditional comment', max_length=30, null=True, verbose_name='Coment')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique Identifier [ UUID ]', primary_key=True, serialize=False, unique=True, verbose_name='UID')),
                ('request', models.ForeignKey(help_text='Original Requirement', on_delete=django.db.models.deletion.PROTECT, related_name='request_history', to='pts.request', verbose_name='Requirement')),
                ('request_status', models.ForeignKey(blank=True, default=1, help_text='Requirement status', on_delete=django.db.models.deletion.PROTECT, to='pts.requeststatus', verbose_name='Status')),
            ],
            options={
                'verbose_name': 'history',
                'verbose_name_plural': 'history',
                'db_table': 'pts_request_history',
            },
        ),
    ]
